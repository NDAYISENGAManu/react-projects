{"ast":null,"code":"var _jsxFileName = \"/home/manu/Documents/GitHub/react-projects/15-cocktails/src/context.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('azzzzz');\n  const [cocktails, setCocktails] = useState([]);\n\n  const fetchDrinks = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const {\n        drinks\n      } = data;\n\n      if (drinks) {} else {\n        setCocktails([]);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      cocktails,\n      setSearchTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use \n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/home/manu/Documents/GitHub/react-projects/15-cocktails/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","response","fetch","data","json","drinks","error","console","log","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2DAAZ;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,QAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMe,WAAW,GAAG,YAAY;AAC9BL,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,GAAEO,UAAW,EAArB,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAACC,QAAAA;AAAD,UAAWF,IAAjB;;AACA,UAAGE,MAAH,EAAU,CAET,CAFD,MAGI;AACFN,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXD,CAWE,OAAOW,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAhBD;;AAkBAnB,EAAAA,SAAS,CAAC,MAAI;AACZa,IAAAA,WAAW;AACZ,GAFQ,EAEP,CAACJ,UAAD,CAFO,CAAT;AAIA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,OADK;AAELI,MAAAA,SAFK;AAGLD,MAAAA;AAHK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGJ,QAPH,CADF;AAWD,CAtCD,C,CAuCA;;;AACA,OAAO,MAAMgB,gBAAgB,GAAG,MAAM;AACpC,SAAOvB,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from 'react' \nimport { useCallback } from 'react' \n \nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=' \nconst AppContext = React.createContext() \n \nconst AppProvider = ({ children }) => { \n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('azzzzz')\n  const [cocktails, setCocktails] = useState([])\n\n  const fetchDrinks = async () => {\n    setLoading(true)\n    try {      \n      const response = await fetch(`${url}${searchTerm}`)\n      const data = await response.json()\n      const {drinks} = data;\n      if(drinks){\n\n      }\n      else{\n        setCocktails([])\n      }\n      setLoading(false)\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  useEffect(()=>{\n    fetchDrinks()\n  },[searchTerm])\n\n  return (\n    <AppContext.Provider \n      value={{ \n        loading, \n        cocktails, \n        setSearchTerm, \n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  )\n} \n// make sure use \nexport const useGlobalContext = () => { \n  return useContext(AppContext) \n} \n  \nexport { AppContext, AppProvider } \n"]},"metadata":{},"sourceType":"module"}